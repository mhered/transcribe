1
00:00:00,000 --> 00:00:04,000
Bueno, bueno.

2
00:00:04,000 --> 00:00:08,000
Hola, hola, hola de nuevo.

3
00:00:08,000 --> 00:00:12,000
Ya estamos aquí, no hay tiempo para descansar.

4
00:00:12,000 --> 00:00:16,000
Hay muchas preguntas y muchas...

5
00:00:16,000 --> 00:00:20,000
Sí, sí, verdad, verdad. Eso es bueno, eso es bueno.

6
00:00:20,000 --> 00:00:24,000
Bueno, está súper interesante. Bueno, pues vamos a presentar ya la siguiente charla

7
00:00:24,000 --> 00:00:28,000
que se llama entrega tu producto como una API, diríamos una API.

8
00:00:28,000 --> 00:00:31,000
Si queremos ser guais a ver el inglés.

9
00:00:31,000 --> 00:00:36,000
Bueno, y habla sobre cómo buenas prácticas a la hora de diseñar

10
00:00:36,000 --> 00:00:41,000
APIs, ¿no? Muchas veces, bueno, está muy de moda tanto en el mundo de los microservicios,

11
00:00:41,000 --> 00:00:46,000
como de cara a que tú querés un producto, que al final ya es que puedas ser utilizado por terceros,

12
00:00:46,000 --> 00:00:51,000
y esto precisamente da mucho valor porque puede ser usado no solo para una interfaz tuya propia interna,

13
00:00:51,000 --> 00:00:57,000
sino para que utiliza otra gente y estas APIs son súper poderosas para generar

14
00:00:57,000 --> 00:01:01,000
efectos de red, ¿no? Que hayan muchísimos clientes,

15
00:01:01,000 --> 00:01:05,000
y sin tan inclusión las empresas, utilicen tu servicio para

16
00:01:05,000 --> 00:01:09,000
crear cosas nuevas que tú ni siquiera habías pensado.

17
00:01:09,000 --> 00:01:13,000
Pero para que esto realmente puedan hacerlo y no se vuelva loco,

18
00:01:13,000 --> 00:01:18,000
si digan, está, pi, es una mierda, pues hay que hacerlas bien.

19
00:01:18,000 --> 00:01:24,000
Y bueno, pues de esto lo que yo entiendo, que nos va a hablar nuestro ponente, ¿qué es, Sergio?

20
00:01:24,000 --> 00:01:29,000
Pues el ponente es Tomás Garzón-Herbá, es desarrollador Python deango,

21
00:01:29,000 --> 00:01:34,000
y le gusta mucho los proyectos innovadores, desarrollar software de calidad

22
00:01:34,000 --> 00:01:39,000
con metodologías ágiles y trabajo en equipo. Así que, ¿te damos la bienvenida?

23
00:01:39,000 --> 00:01:42,000
¿Qué tanto más?

24
00:01:42,000 --> 00:01:44,000
Hola, buenos días. ¿Cómo estás?

25
00:01:44,000 --> 00:01:49,000
Disculpe mi volumen de voz, pero estuve en problemas en el hospital,

26
00:01:49,000 --> 00:01:53,000
tenía el aire demasiado fuerte, así que esta mañana casi pierdo la voz.

27
00:01:53,000 --> 00:01:55,000
Es el problema de la última hora.

28
00:01:55,000 --> 00:01:56,000
Tranquilo, aquí sí.

29
00:01:56,000 --> 00:02:01,000
A lo mejor te puedes subir una pizca del volumen del micro, pero no sé si vale.

30
00:02:01,000 --> 00:02:04,000
Bueno, está, vale, se escucha bien, ¿eh?

31
00:02:04,000 --> 00:02:09,000
No, se te lleve bien. No fuerses demasiado, que es importante acabar.

32
00:02:09,000 --> 00:02:11,000
Es esperanza.

33
00:02:11,000 --> 00:02:17,000
Vale, bueno, pues nada, te ponemos tu presentación aquí y te dejamos,

34
00:02:17,000 --> 00:02:22,000
tienes el chat privado a la derecha, por si quieres preguntarnos

35
00:02:22,000 --> 00:02:25,000
cualquier cosa y bueno, pues nada, todo tuyo, ¿vale?

36
00:02:25,000 --> 00:02:27,000
Se ve, se ve, ¿no?

37
00:02:27,000 --> 00:02:29,000
Se te oye bien, sí.

38
00:02:29,000 --> 00:02:31,000
Se ve, se ve, se ve.

39
00:02:31,000 --> 00:02:32,000
Gracias.

40
00:02:32,000 --> 00:02:34,000
A nos vamos nosotros y te dejamos. Venga, está suerte todas.

41
00:02:34,000 --> 00:02:35,000
Gracias.

42
00:02:35,000 --> 00:02:39,000
Buenos días. Voy a ir, me voy a ir, no tengo mucho tiempo,

43
00:02:39,000 --> 00:02:44,000
voy a ir empezando por romper un poco el hielo y que me conozcáis

44
00:02:44,000 --> 00:02:48,000
Shoy Toma Garzón, como han dicho, Estudio de Ingeniería Informática en Granada,

45
00:02:48,000 --> 00:02:52,000
en la Ticicleta Artificial. En estos 15 años desde que finalice mi estudio,

46
00:02:52,000 --> 00:02:57,000
he trabajado para diversas startups, aproximadamente unos 20 proyectos,

47
00:02:57,000 --> 00:03:01,000
todos ligados o siempre como desarrollador Python Django,

48
00:03:01,000 --> 00:03:05,000
en uno de ellos como, en uno de ellos como Full Stack y más recientemente

49
00:03:05,000 --> 00:03:09,000
Centrándome como backend developer en desarrollo de APIs.

50
00:03:09,000 --> 00:03:14,000
Mi proyecto actual es un curo, es una fintech,

51
00:03:14,000 --> 00:03:18,000
un trabajo dentro de equipo de vaquete y bueno desarrollamos el producto

52
00:03:18,000 --> 00:03:22,000
para eso, para fintech.

53
00:03:22,000 --> 00:03:26,000
Bien, porque estoy aquí un domingo por la mañana conectado a una charla

54
00:03:26,000 --> 00:03:29,000
de este hombre, claro que me va a hablar sobre APIs.

55
00:03:29,000 --> 00:03:34,000
Como decían mis compañeros que han hecho la introducción.

56
00:03:34,000 --> 00:03:36,000
Bueno, hoy en día el API es bastante demandado,

57
00:03:36,000 --> 00:03:39,000
tanto por clientes como por el propio mercado que me va tirando

58
00:03:39,000 --> 00:03:42,000
para poder integrar nuestro producto.

59
00:03:42,000 --> 00:03:45,000
Bien, también porque puede ser que tenga un producto, un prototipo,

60
00:03:45,000 --> 00:03:49,000
una idea que quiero llevar la cabo y es muy fácil desarrollar

61
00:03:49,000 --> 00:03:53,000
un pequeño proyecto y conectarla a una API para poder usarla

62
00:03:53,000 --> 00:03:56,000
dentro de otro proyecto más grande, con lo cual se me ofrece,

63
00:03:56,000 --> 00:04:00,000
se me abre bastantes posibilidades.

64
00:04:00,000 --> 00:04:04,000
No voy a parar mucho introducir lo que es una API porque es archiconocido.

65
00:04:04,000 --> 00:04:07,000
Para mí dentro de muchas definiciones,

66
00:04:07,000 --> 00:04:10,000
agujiendo una de las Wikipedia, para mí tiene tres puntos claves,

67
00:04:10,000 --> 00:04:14,000
uno que es una interfaz para comunicar tanto sistema, servicio o programa.

68
00:04:14,000 --> 00:04:18,000
Otro punto importante es que esconde los detalles de implementación.

69
00:04:18,000 --> 00:04:22,000
Tú como consumidor no te interesa saber los detalles en los que está hecho

70
00:04:22,000 --> 00:04:25,000
ese servicio, te interesa los inputs y los outputs.

71
00:04:25,000 --> 00:04:29,000
Y para eso funciona, yo lo veo, como un contrato entre dos partes,

72
00:04:29,000 --> 00:04:32,000
el consumidor y productor de esa API.

73
00:04:32,000 --> 00:04:36,000
Es algo bastante sencillo de entender.

74
00:04:36,000 --> 00:04:41,000
Bien, como comentaba antes, he dicho de tener una API potente,

75
00:04:41,000 --> 00:04:46,000
te va a ofrecer un nuevo mercado, un nuevo modelo de negocio

76
00:04:46,000 --> 00:04:48,000
para tu producto.

77
00:04:48,000 --> 00:04:52,000
Entonces, en los años anteriores a este cambio ya,

78
00:04:52,000 --> 00:04:54,000
a la estructura de servicios y tal,

79
00:04:54,000 --> 00:04:56,000
encontramos que cuando desarrollamos un producto,

80
00:04:56,000 --> 00:04:59,000
nos centrabamos mucho en desarrollar todas las piezas de producto,

81
00:04:59,000 --> 00:05:02,000
desde el front hasta el back, pasando por DevOps, todo esto.

82
00:05:02,000 --> 00:05:06,000
Al final decía que desarrollar un proyecto en una startup era bastante complicado

83
00:05:06,000 --> 00:05:08,000
y hace bastante mucho recursos,

84
00:05:08,000 --> 00:05:12,000
y al final personas con un full stack bastante fuerte,

85
00:05:12,000 --> 00:05:14,000
y hacemos un poco, un poco casi de todo.

86
00:05:14,000 --> 00:05:20,000
Hoy en día se están vinando todos los proyectos hacia la arquitectura de colaboración,

87
00:05:20,000 --> 00:05:25,000
donde los distintos sistemas hagan entre sí

88
00:05:25,000 --> 00:05:27,000
para intentar llegar a un objetivo común.

89
00:05:27,000 --> 00:05:30,000
Esto es bastante positivo, por ejemplo, para startup,

90
00:05:30,000 --> 00:05:34,000
porque puedes centrarte o focalizarte tu esfuerzos en lo que realmente sabes hacer,

91
00:05:34,000 --> 00:05:37,000
en resolver tu problema en la cual eres experto,

92
00:05:37,000 --> 00:05:40,000
y te olvidas de mucha parte de conexión de datos, por ejemplo,

93
00:05:40,000 --> 00:05:42,000
o de visualización de lo mismo.

94
00:05:42,000 --> 00:05:45,000
También encontramos que es algo que es obligatorio,

95
00:05:45,000 --> 00:05:47,000
porque estamos hablando de disucciones muy complejas,

96
00:05:47,000 --> 00:05:50,000
y al final hay unos pocos players en el mercado,

97
00:05:50,000 --> 00:05:53,000
que son los que llevan los grandes contratos, los grandes cuentas,

98
00:05:53,000 --> 00:05:56,000
y tu producto de pequeñitos y conectas con una API,

99
00:05:56,000 --> 00:06:00,000
y hablo entre ellos con otros productos que están funcionando,

100
00:06:00,000 --> 00:06:02,000
para resolver el mismo problema.

101
00:06:02,000 --> 00:06:06,000
Y bien, como resalto, para poder colaborar,

102
00:06:06,000 --> 00:06:10,000
lo primero que hay que hacer, por lo más básico, es comunicarse entre ellos.

103
00:06:10,000 --> 00:06:16,000
Una API, bueno, hay muchas formas de APIs,

104
00:06:16,000 --> 00:06:18,000
de un simple fichero de intercambio,

105
00:06:18,000 --> 00:06:24,000
tipo sistema bancario, donde tenemos ficheros de consolidación bancaria diarios,

106
00:06:24,000 --> 00:06:28,000
y que funcionen como una API, porque al final esperas unos datos

107
00:06:28,000 --> 00:06:32,000
de nuestras deposiciones, y luego podras escribir como respuesta.

108
00:06:32,000 --> 00:06:37,000
RPC, también es bastante conocido, WebSocket, REST, etc.

109
00:06:37,000 --> 00:06:40,000
Bueno, obviamente me voy a centrar en la API REST,

110
00:06:40,000 --> 00:06:45,000
que es la API que más usamos desde el punto de vista de desarrolladores,

111
00:06:45,000 --> 00:06:50,000
hoy en día. Tampoco me voy a parar mucho de definir o explicar API REST,

112
00:06:50,000 --> 00:06:52,000
o sea, que tenemos cuatro operaciones,

113
00:06:52,000 --> 00:06:55,000
aquí lo que quiero es saltar, es que vale tanto para comunicarnos

114
00:06:55,000 --> 00:07:01,000
entre clientes y servidor, pero también entre distintos servicios automatizados.

115
00:07:01,000 --> 00:07:06,000
Bien, la charla está estructurada en tres partes,

116
00:07:06,000 --> 00:07:09,000
uno que sería empezando por los design principles,

117
00:07:09,000 --> 00:07:14,000
es decir, qué principio debo seguir a desarrollar mi producto como una API,

118
00:07:14,000 --> 00:07:17,000
luego el diseño y luego por último la implementación.

119
00:07:17,000 --> 00:07:22,000
Entonces, estos son como los seis puntos que le va a tener en la cabeza siempre

120
00:07:22,000 --> 00:07:26,000
que desarrollemos una API. Primero, y bastante simple de entender,

121
00:07:26,000 --> 00:07:29,000
hace una cosa y hazla bien, que esto quiere decir,

122
00:07:29,000 --> 00:07:33,000
pues que cuando haces un endpoint, una nueva característica,

123
00:07:33,000 --> 00:07:36,000
séntrate en que esa característica funcione bien,

124
00:07:36,000 --> 00:07:38,000
y no haga más de una cosa la ver, siguiendo un poco también

125
00:07:38,000 --> 00:07:41,000
los principios de clean code, ¿no?

126
00:07:41,000 --> 00:07:45,000
Leí un artículo sobre Slack, decían que en su fase inicial

127
00:07:45,000 --> 00:07:48,000
tenía un endpoint para hacer un connect, que conectaba al cliente

128
00:07:48,000 --> 00:07:51,000
para poder recibir mensajes, y esa misma respuesta de connect

129
00:07:51,000 --> 00:07:54,000
devolvía también las salas a las que estaba conectada,

130
00:07:54,000 --> 00:07:57,000
y entonces de cada sala todos los usuarios en los que estaban conectados

131
00:07:57,000 --> 00:07:59,000
en esa, que pretendían esa sala.

132
00:07:59,000 --> 00:08:03,000
Esto, cuando el sistema de Slack empezó a crecer para grandes equipos,

133
00:08:03,000 --> 00:08:06,000
que era de grupo, pues os podéis imaginar que el sistema

134
00:08:06,000 --> 00:08:08,000
sufrió un performance malísimo.

135
00:08:08,000 --> 00:08:11,000
Entonces tuvieron que hacer un análisis y vieron que realmente

136
00:08:11,000 --> 00:08:14,000
la mayor parte de la gente hacía un connect, únicamente para tener la conexión,

137
00:08:14,000 --> 00:08:18,000
y los datos de las salas o de los usuarios no eran necesarios.

138
00:08:18,000 --> 00:08:21,000
Hicieron un estudio y vieron que realmente le podían que lo podían quitar,

139
00:08:21,000 --> 00:08:26,000
y en una transición acordada con la comunidad, hicieron hacer dos endpoints distintos,

140
00:08:26,000 --> 00:08:28,000
uno para connect, que suavemente se conecta,

141
00:08:28,000 --> 00:08:30,000
y otro para tenerse los datos de las personas.

142
00:08:30,000 --> 00:08:32,000
Creo que es bastante sencillo.

143
00:08:32,000 --> 00:08:35,000
El segundo punto, y que está muy orientado a cómo la gente va a ver,

144
00:08:35,000 --> 00:08:38,000
va a percibir o va a empezar a hacer cosas con tu API,

145
00:08:38,000 --> 00:08:40,000
es tener un get-in-started fácil y rápido.

146
00:08:40,000 --> 00:08:46,000
A todos como desarrolladores no nos gusta leer ciento de reseña

147
00:08:46,000 --> 00:08:51,000
y documentación para poder hacer un no la mundo de una API,

148
00:08:51,000 --> 00:08:55,000
sino que, al embargo, que sea bastante sencillo y fácil, y entender.

149
00:08:55,000 --> 00:09:00,000
Entonces tener un get-in-started fácil y rápido no va a ayudar a que la gente vea

150
00:09:00,000 --> 00:09:05,000
y chequee rápido si tu API funciona o no funciona, y curve sus necesidades.

151
00:09:05,000 --> 00:09:10,000
La coherencia intuitiva, esto quiere decir que en todo, como es lógico,

152
00:09:10,000 --> 00:09:13,000
cuando desarrolladores una API, tienes que mantener la coherencia

153
00:09:13,000 --> 00:09:16,000
tanto a nivel de nombres, de naming, hablar de ponerle los filtros,

154
00:09:16,000 --> 00:09:18,000
hablar de devolver los datos, etcétera.

155
00:09:18,000 --> 00:09:25,000
Es decir, que no lees los parámetros y añadas una complejidad que no es necesaria,

156
00:09:25,000 --> 00:09:28,000
ante las cosas de iguales para que todo el mundo espere

157
00:09:28,000 --> 00:09:30,000
que esté funcionando como debiera esperar en otro sitio

158
00:09:30,000 --> 00:09:33,000
y no tenga que complicarse la vida buscando que este parámetro no se llama así

159
00:09:33,000 --> 00:09:36,000
en este point, sino que se llama de otra manera, se llama los igual.

160
00:09:36,000 --> 00:09:38,000
¿Gestionan los errores con un significado?

161
00:09:38,000 --> 00:09:42,000
O sea, cuando algo vaya mal o cuando hay un parámetro que no es el esperado

162
00:09:42,000 --> 00:09:46,000
o no tiene un formato que el esperado, simplemente especifica que error es

163
00:09:46,000 --> 00:09:50,000
y gestionalo, porque muchas veces hay un error de variación

164
00:09:50,000 --> 00:09:55,000
y simplemente devolver la API un dato no válido, no aporta nada.

165
00:09:55,000 --> 00:09:57,000
Sin embargo, si estás variando, por ejemplo, el DNA,

166
00:09:57,000 --> 00:10:01,000
oye, pues, diga el DNA no es válido porque lo mejor le falta la letra

167
00:10:01,000 --> 00:10:04,000
o que tiene no válido porque no tiene los siguientes caracteres,

168
00:10:04,000 --> 00:10:07,000
en fin, este tipo de cosas creo que ayudan bastante a la otra parte

169
00:10:07,000 --> 00:10:11,000
a entender qué está fallando dentro de su llamada API.

170
00:10:11,000 --> 00:10:15,000
El cinco, estaba también un poco ligado al punto,

171
00:10:15,000 --> 00:10:18,000
al ejemplo que he comentado en el punto uno, es que cuando hagas un endpoint

172
00:10:18,000 --> 00:10:21,000
piensa que eso va a poder ser usado vacíamente

173
00:10:21,000 --> 00:10:24,000
y piensa cómo va a escalar y el performa que va a tener, ¿vale?

174
00:10:24,000 --> 00:10:28,000
Le pasó a Slack, no puede pasar a cualquiera.

175
00:10:28,000 --> 00:10:32,000
Un caso bastante típico es que cuando siempre que devuelvas listados,

176
00:10:32,000 --> 00:10:35,000
piensa en la paginación. Nunca devuelvas listado sin paginar,

177
00:10:35,000 --> 00:10:40,000
porque cuando tengas cientos de miles de registros, pues aquello explota.

178
00:10:40,000 --> 00:10:44,000
Y por último, bastante costoso, como después voy a explicar un poco

179
00:10:44,000 --> 00:10:47,000
para las startups, son los breaking changes.

180
00:10:47,000 --> 00:10:52,000
Estas son violaciones de tu contrato que has firmado con tu cliente

181
00:10:52,000 --> 00:10:54,000
como consumidor de tu API.

182
00:10:54,000 --> 00:10:58,000
Cuando tengas un contrato, metas el breaking changes,

183
00:10:58,000 --> 00:11:00,000
estás rompiendo cláusulas del contrato.

184
00:11:00,000 --> 00:11:03,000
Entonces hay que ser muy cuidadosos con eso.

185
00:11:03,000 --> 00:11:09,000
Pasando a los principios de diseño,

186
00:11:09,000 --> 00:11:14,000
podemos definir un proceso alto nivel,

187
00:11:14,000 --> 00:11:17,000
que pasaría en cuatro fases.

188
00:11:17,000 --> 00:11:20,000
Primero, empieza escribiendo las especificaciones.

189
00:11:20,000 --> 00:11:23,000
Algo que es obvio, pero que realmente luego en muchas startups

190
00:11:23,000 --> 00:11:27,000
se hace, se empieza a desarrollar y ya saldrá como salga.

191
00:11:27,000 --> 00:11:30,000
Esto hace que luego el proceso de revisión, que sería el punto 2,

192
00:11:30,000 --> 00:11:34,000
pueda ser bastante costoso, porque veamos que no sé si hay algún patrón,

193
00:11:34,000 --> 00:11:37,000
se están duplicando respuestas,

194
00:11:37,000 --> 00:11:39,000
hay alguna parte de un parámetro que no coincide

195
00:11:39,000 --> 00:11:42,000
con la coherencia que hemos comentado antes, etcétera.

196
00:11:42,000 --> 00:11:45,000
Escribidas las especificaciones y el proceso de revisión interna.

197
00:11:45,000 --> 00:11:48,000
Por ejemplo, Slack comentaba que tienen un canal propio

198
00:11:48,000 --> 00:11:51,000
donde están los desarrolladores que dan feedback sobre esa API que se quiere hacer y tal.

199
00:11:51,000 --> 00:11:54,000
El punto 3, una vez que tiene la especificación,

200
00:11:54,000 --> 00:11:59,000
compártela con tus partners o tus early adopters,

201
00:11:59,000 --> 00:12:01,000
que van a usar esa API en primer lugar,

202
00:12:01,000 --> 00:12:06,000
y esto te va a facilitar ese feedback antes de empezar a desarrollar.

203
00:12:06,000 --> 00:12:09,000
Y luego, una vez que tengas la API implementada,

204
00:12:09,000 --> 00:12:13,000
intenta abrirla en beta, antes de abrirla al público en general,

205
00:12:13,000 --> 00:12:16,000
o por lo menos con una etiqueta de beta para quien esté usando,

206
00:12:16,000 --> 00:12:20,000
sepa lo que está usando.

207
00:12:20,000 --> 00:12:27,000
Y por último, pasaremos a la parte que más nos gusta,

208
00:12:27,000 --> 00:12:29,000
la parte de implementación.

209
00:12:29,000 --> 00:12:33,000
Ya tengo claro lo que tengo que hacer,

210
00:12:33,000 --> 00:12:37,000
y ahora empiezo a preguntarme una serie de cuestiones

211
00:12:37,000 --> 00:12:39,000
que van a afectar a mi desarrollo.

212
00:12:39,000 --> 00:12:41,000
Primero es la autenticación y la utilización.

213
00:12:41,000 --> 00:12:44,000
Lo comentaremos cada uno de estos puntos más en detalle,

214
00:12:44,000 --> 00:12:46,000
el diseño de los tests,

215
00:12:46,000 --> 00:12:50,000
las especificaciones, métodos de visita, servizadores,

216
00:12:50,000 --> 00:12:52,000
qué parámetros de entrada van a tener,

217
00:12:52,000 --> 00:12:56,000
qué errores voy a gestionar, qué logs voy a dejar de todo esto.

218
00:12:56,000 --> 00:12:58,000
Realizo test de rendimiento y performance,

219
00:12:58,000 --> 00:13:01,000
escribo las especificaciones en código,

220
00:13:01,000 --> 00:13:03,000
caso de que la tenga en otro repo.

221
00:13:03,000 --> 00:13:05,000
Les puedo comentar un poco más sobre esto.

222
00:13:05,000 --> 00:13:09,000
Y por último, escribe las list notes que estén asociadas a Atendpoint.

223
00:13:09,000 --> 00:13:13,000
Y si hay algún breaking change, es el momento de comunicarlo,

224
00:13:13,000 --> 00:13:16,000
y si no lo hagan, obviamente se habrá acordado.

225
00:13:16,000 --> 00:13:19,000
Antes de pasar a cada uno de estos puntos anteriores,

226
00:13:19,000 --> 00:13:24,000
que iré viendo una librería, así como lo hemos implementado,

227
00:13:24,000 --> 00:13:28,000
simplemente por dejar claro el stack,

228
00:13:28,000 --> 00:13:31,000
o sea, dos piscos en el Django framework

229
00:13:31,000 --> 00:13:33,000
y Resa framework encima,

230
00:13:33,000 --> 00:13:36,000
con dos librerías para autenticación y autenticación.

231
00:13:36,000 --> 00:13:40,000
Bien, de todos los puntos que comentaba anteriormente,

232
00:13:40,000 --> 00:13:44,000
el primero sería la autenticación y la autorización.

233
00:13:44,000 --> 00:13:46,000
Aquí podemos plantear dos escenarios.

234
00:13:46,000 --> 00:13:50,000
Un escenario donde es que se autentica, es el usuario final,

235
00:13:50,000 --> 00:13:52,000
mediante un usuario y una password.

236
00:13:52,000 --> 00:13:55,000
Esto es para, por ejemplo, una aplicación móvil,

237
00:13:55,000 --> 00:13:58,000
que el usuario se ataca a la API nuestra,

238
00:13:58,000 --> 00:14:01,000
y con un usuario contraseña le damos un token,

239
00:14:01,000 --> 00:14:03,000
por ejemplo, un JSON web token,

240
00:14:03,000 --> 00:14:05,000
que es bastante conocido dentro de la industria,

241
00:14:05,000 --> 00:14:08,000
y eso ya autentica, identifica al usuario.

242
00:14:08,000 --> 00:14:10,000
Luego, todas las llamadas que se hacen a la API

243
00:14:10,000 --> 00:14:12,000
van con ese token en la cabecera,

244
00:14:12,000 --> 00:14:15,000
y nosotros en el backend, con press framework,

245
00:14:15,000 --> 00:14:19,000
con pay.jotwt, podemos sacar el usuario,

246
00:14:19,000 --> 00:14:22,000
y está bastante integrado dentro del framework,

247
00:14:22,000 --> 00:14:25,000
y no nos va a dar ningún tipo de problema.

248
00:14:25,000 --> 00:14:29,000
La autorización de los recursos que puedo acceder

249
00:14:29,000 --> 00:14:31,000
viene determinado por el usuario lo que ha dado,

250
00:14:31,000 --> 00:14:34,000
y ya somos nosotros en la propia vista de cada endpoint,

251
00:14:34,000 --> 00:14:38,000
que hacemos ese filter para sacar los datos

252
00:14:38,000 --> 00:14:40,000
a los que puede acceder.

253
00:14:40,000 --> 00:14:43,000
Y luego, podemos tener otro sistema de autenticación,

254
00:14:43,000 --> 00:14:46,000
donde esté más pensado para aplicaciones,

255
00:14:46,000 --> 00:14:48,000
para otros servicios que quieren conectarse

256
00:14:48,000 --> 00:14:50,000
a nuestro servicio para hacer algo.

257
00:14:50,000 --> 00:14:52,000
Entonces, podemos utilizar una autenticación por OAuth,

258
00:14:52,000 --> 00:14:56,000
donde cada servicio está asociada a una aplicación de OAuth,

259
00:14:56,000 --> 00:14:59,000
y cada aplicación puede tener una serie de permisos.

260
00:14:59,000 --> 00:15:02,000
Esto nos permite orquestar distintos servicios

261
00:15:02,000 --> 00:15:04,000
que se conectan a nuestro, y cada uno de ellos

262
00:15:04,000 --> 00:15:06,000
va a hacer una cosa de tinta.

263
00:15:06,000 --> 00:15:08,000
Por ejemplo, podemos tener un servicio asociado

264
00:15:08,000 --> 00:15:10,000
al sign up y onboarding,

265
00:15:10,000 --> 00:15:14,000
y otro asociado al tema de transacciones financieras.

266
00:15:14,000 --> 00:15:17,000
Entonces, cada servicio tiene su autenticación

267
00:15:17,000 --> 00:15:20,000
y su scope, por lo tanto, la API,

268
00:15:20,000 --> 00:15:23,000
va a ser la que nos limite en base a ese token

269
00:15:23,000 --> 00:15:26,000
que está generado para esa aplicación,

270
00:15:26,000 --> 00:15:28,000
que endpoint puede atacar y cual no.

271
00:15:28,000 --> 00:15:31,000
Comentado abajo, le he puesto un par de links

272
00:15:31,000 --> 00:15:33,000
en el libro que nos utilizamos,

273
00:15:33,000 --> 00:15:36,000
son bastante robustas y extensibles.

274
00:15:36,000 --> 00:15:38,000
Está muy bien.

275
00:15:38,000 --> 00:15:41,000
El testing, como comentaba anteriormente,

276
00:15:41,000 --> 00:15:44,000
puede empezar desarrollando directamente los tests

277
00:15:44,000 --> 00:15:47,000
que quiero que mi API cumpla,

278
00:15:47,000 --> 00:15:49,000
porque como comentaba,

279
00:15:49,000 --> 00:15:52,000
si afirmar un contrato el TDD encaja bastante bien.

280
00:15:52,000 --> 00:15:55,000
Puede tener un equipo desarrollando tests sobre mi endpoint,

281
00:15:55,000 --> 00:15:59,000
a la misma vez que el otro equipo está implementando el propio endpoint.

282
00:15:59,000 --> 00:16:01,000
Es bastante potente.

283
00:16:01,000 --> 00:16:04,000
Luego, lo que sí que es bastante interesante,

284
00:16:04,000 --> 00:16:07,000
es intentar hacer unos tests

285
00:16:07,000 --> 00:16:09,000
que valide cierto un workflow.

286
00:16:09,000 --> 00:16:11,000
Igual que tenemos en Selenium,

287
00:16:11,000 --> 00:16:14,000
podemos montar un test en Selenium para hacer simular los clicks

288
00:16:14,000 --> 00:16:17,000
del usuario, ir a navegación y esperar un distinto resultado.

289
00:16:17,000 --> 00:16:20,000
Puedo montar secuencias de llamadas a la API,

290
00:16:20,000 --> 00:16:23,000
simulando esa interacción en un Chrome

291
00:16:23,000 --> 00:16:26,000
para poder hacer algo.

292
00:16:26,000 --> 00:16:29,000
He dejado algún link en las transparencias,

293
00:16:29,000 --> 00:16:31,000
lo compartiremos.

294
00:16:31,000 --> 00:16:34,000
VDD, basado para Res Framework,

295
00:16:34,000 --> 00:16:36,000
que está bastante interesante.

296
00:16:36,000 --> 00:16:38,000
Incluso he puesto un proyecto

297
00:16:38,000 --> 00:16:41,000
bastante actual, nuevo,

298
00:16:41,000 --> 00:16:43,000
demasiado maduro,

299
00:16:43,000 --> 00:16:45,000
con respecto a Django,

300
00:16:45,000 --> 00:16:48,000
pero permite, a partir de la especificación OpenAPI,

301
00:16:48,000 --> 00:16:51,000
ser capaz de generar 100 test automáticos,

302
00:16:51,000 --> 00:16:53,000
por sí mismo,

303
00:16:53,000 --> 00:16:56,000
y tener que definirlos como backend.

304
00:16:56,000 --> 00:16:59,000
Es muy interesante, y es un proyecto a seguir,

305
00:16:59,000 --> 00:17:01,000
de cerca de los próximos años.

306
00:17:01,000 --> 00:17:03,000
Luego, la implementación,

307
00:17:03,000 --> 00:17:06,000
para aquellos que estén familiarizados con Res Framework,

308
00:17:06,000 --> 00:17:08,000
sigue el principio de...

309
00:17:08,000 --> 00:17:10,000
No repite.

310
00:17:10,000 --> 00:17:13,000
Y Res Framework nos da mucho de la funcionalidad

311
00:17:13,000 --> 00:17:15,000
que ya estamos...

312
00:17:15,000 --> 00:17:17,000
que ya ha documentado, como la paginación,

313
00:17:17,000 --> 00:17:19,000
los distintos tipos de autotuticaciones,

314
00:17:19,000 --> 00:17:21,000
el throttling para evitar ciertos abusos a la API,

315
00:17:21,000 --> 00:17:23,000
etcétera, etcétera.

316
00:17:23,000 --> 00:17:25,000
Tenemos incluso de mil la opciones,

317
00:17:25,000 --> 00:17:27,000
tendidas, usando algunas otras librerías

318
00:17:27,000 --> 00:17:29,000
de la comunidad,

319
00:17:29,000 --> 00:17:31,000
como son los Routers y los Servizadores de Anidado,

320
00:17:31,000 --> 00:17:33,000
que nos permiten...

321
00:17:33,000 --> 00:17:35,000
no simplifican la gestión del código

322
00:17:35,000 --> 00:17:37,000
o de las vistas, aunque hay que tener cuidado

323
00:17:37,000 --> 00:17:39,000
de no abusar para no repetir vistas

324
00:17:39,000 --> 00:17:41,000
o acciones que se pueden repetir

325
00:17:41,000 --> 00:17:43,000
en dos sitios.

326
00:17:43,000 --> 00:17:45,000
Luego, los filtros y las ordenaciones

327
00:17:45,000 --> 00:17:47,000
están bastante maduras y consolidadas

328
00:17:47,000 --> 00:17:49,000
entre Res Framework, y luego tenemos librerías externas,

329
00:17:49,000 --> 00:17:51,000
como Llango Filters,

330
00:17:51,000 --> 00:17:53,000
que aportan toda la potencia que necesitamos

331
00:17:53,000 --> 00:17:55,000
hoy en día para varios tipos de cosas.

332
00:17:55,000 --> 00:17:57,000
Nosotros también usamos la librería

333
00:17:57,000 --> 00:17:59,000
para hacer campos expandibles, una vez opcional.

334
00:17:59,000 --> 00:18:01,000
Esto intenta hacer algo similar

335
00:18:01,000 --> 00:18:03,000
a como hace GraphQL, donde podemos

336
00:18:03,000 --> 00:18:05,000
expandir nodos, pero bueno,

337
00:18:05,000 --> 00:18:07,000
hay que tener bastante cuidado con esto,

338
00:18:07,000 --> 00:18:09,000
porque el rendimiento de las queries

339
00:18:09,000 --> 00:18:11,000
se nos puede ir,

340
00:18:11,000 --> 00:18:13,000
entonces hay que echarle siempre un ojo

341
00:18:13,000 --> 00:18:15,000
a esta parte antes de

342
00:18:15,000 --> 00:18:17,000
darle como validada.

343
00:18:17,000 --> 00:18:19,000
Un draw.

344
00:18:19,000 --> 00:18:21,000
Que no se suele prestar mucha atención

345
00:18:21,000 --> 00:18:23,000
es la auditoría y los logs, es decir,

346
00:18:23,000 --> 00:18:25,000
¿qué pasa de tu API?

347
00:18:25,000 --> 00:18:27,000
¿Qué están haciendo los usuarios que la están consumiendo?

348
00:18:27,000 --> 00:18:29,000
Y al final te va a hacer

349
00:18:29,000 --> 00:18:31,000
te va a dar una idea

350
00:18:31,000 --> 00:18:33,000
de cómo está siendo usada,

351
00:18:33,000 --> 00:18:35,000
y por ejemplo, puedes testar

352
00:18:35,000 --> 00:18:37,000
que Endpoints van más lentos,

353
00:18:37,000 --> 00:18:39,000
cuáles de esos Endpoints hacen varias cosas,

354
00:18:39,000 --> 00:18:41,000
o incluso que Endpoints han dejado

355
00:18:41,000 --> 00:18:43,000
de utilizarse, y ese caso pues pensar

356
00:18:43,000 --> 00:18:45,000
en un rediseño

357
00:18:45,000 --> 00:18:47,000
o en retirar esos Endpoints, porque no

358
00:18:47,000 --> 00:18:49,000
nos hacía falta.

359
00:18:49,000 --> 00:18:51,000
También se pueden tener sistemas de auditoría,

360
00:18:51,000 --> 00:18:53,000
por ejemplo, se puede utilizar

361
00:18:53,000 --> 00:18:55,000
el paquete de DjangoVis y Audit

362
00:18:55,000 --> 00:18:57,000
para llevar un log de todas las llamadas,

363
00:18:57,000 --> 00:18:59,000
todo lo que ocurre dentro de tu API,

364
00:18:59,000 --> 00:19:01,000
y bueno, es una información bastante

365
00:19:01,000 --> 00:19:03,000
valiosa a la hora de ver

366
00:19:03,000 --> 00:19:05,000
cómo está respondiendo tu sistema.

367
00:19:07,000 --> 00:19:09,000
Bien, un punto bastante

368
00:19:09,000 --> 00:19:11,000
doloroso para las startups,

369
00:19:11,000 --> 00:19:13,000
y muy apreciado como desarrolladores

370
00:19:13,000 --> 00:19:15,000
en ese tema de la documentación,

371
00:19:15,000 --> 00:19:17,000
como ya habréis comentado,

372
00:19:17,000 --> 00:19:19,000
escuchado la frase de que los desarrolladores somos

373
00:19:19,000 --> 00:19:21,000
los cocianos, nos gusta comer

374
00:19:21,000 --> 00:19:23,000
muy buena comida, pero no nos gusta cocinar,

375
00:19:23,000 --> 00:19:25,000
pues bueno, nosotros nos gusta leer

376
00:19:25,000 --> 00:19:27,000
una documentación muy bien escrita,

377
00:19:27,000 --> 00:19:29,000
y nos asombramos de te lo bien que está

378
00:19:29,000 --> 00:19:31,000
escrita y cómo está integrada y tal,

379
00:19:31,000 --> 00:19:33,000
pero luego después a la hora de escribirla somos malísimos.

380
00:19:33,000 --> 00:19:35,000
Además, una startup no tiene

381
00:19:35,000 --> 00:19:37,000
tanto recursos como para que una persona esté escribiendo

382
00:19:37,000 --> 00:19:39,000
documentación full time.

383
00:19:39,000 --> 00:19:41,000
Entonces, el tema de OpenAppy

384
00:19:41,000 --> 00:19:43,000
que comento aquí, creo que es un punto

385
00:19:43,000 --> 00:19:45,000
muy bueno, y de alli todo

386
00:19:45,000 --> 00:19:47,000
es tener una especificación que está capaz

387
00:19:47,000 --> 00:19:49,000
de generarse automáticamente a partir

388
00:19:49,000 --> 00:19:51,000
de código fuente. Nosotros utilizamos

389
00:19:51,000 --> 00:19:53,000
espectacular, es un paquete

390
00:19:53,000 --> 00:19:55,000
bastante fuerte, una evolución

391
00:19:55,000 --> 00:19:57,000
de swagger, soporta

392
00:19:57,000 --> 00:19:59,000
el standard 3, OpenAppy 3,

393
00:19:59,000 --> 00:20:01,000
y el hecho de tener

394
00:20:01,000 --> 00:20:03,000
todo integrado hace que todas las

395
00:20:03,000 --> 00:20:05,000
vistas que generas en Refrain, por todos los

396
00:20:05,000 --> 00:20:07,000
servizadores, los filtros

397
00:20:07,000 --> 00:20:09,000
que has implementado con Django Filters, todo

398
00:20:09,000 --> 00:20:11,000
eso automáticamente

399
00:20:11,000 --> 00:20:13,000
se vuelca un fichero

400
00:20:13,000 --> 00:20:15,000
que luego puedes utilizar

401
00:20:15,000 --> 00:20:17,000
en distintos, primero

402
00:20:17,000 --> 00:20:19,000
puedes utilizarlo para generar un HTML

403
00:20:19,000 --> 00:20:21,000
que desoporte la documentación automática

404
00:20:21,000 --> 00:20:23,000
con lo cual es muy potente, pero puedes

405
00:20:23,000 --> 00:20:25,000
también generar ese de cas, clientes

406
00:20:25,000 --> 00:20:27,000
en distintos lenguajes, de manera que

407
00:20:27,000 --> 00:20:29,000
cualquiera puede bajarse ese cliente

408
00:20:29,000 --> 00:20:31,000
en un payzone, un PHP, Java, etc.

409
00:20:31,000 --> 00:20:33,000
y comenzar a usar Tuapi

410
00:20:33,000 --> 00:20:35,000
dentro de su

411
00:20:35,000 --> 00:20:37,000
propio lenguaje favorito.

412
00:20:37,000 --> 00:20:39,000
Entonces, esto es muy potente

413
00:20:39,000 --> 00:20:41,000
y si lo tenemos bien

414
00:20:41,000 --> 00:20:43,000
orquestado, esto puede estar dentro

415
00:20:43,000 --> 00:20:45,000
de tu pipeline de desarrollo, de manera

416
00:20:45,000 --> 00:20:47,000
que el pipeline completo, cada vez que

417
00:20:47,000 --> 00:20:49,000
se da con la Riris, podría generar esa

418
00:20:49,000 --> 00:20:51,000
especificación OpenAppy, y a partir de ahí

419
00:20:51,000 --> 00:20:53,000
puedes generar la documentación

420
00:20:53,000 --> 00:20:55,000
redepliegar la documentación, redepliegar

421
00:20:55,000 --> 00:20:57,000
tus SDKs y subirlas

422
00:20:57,000 --> 00:20:59,000
a PyPy o otro botón repos. Es muy

423
00:20:59,000 --> 00:21:01,000
potente y creo que

424
00:21:01,000 --> 00:21:03,000
es un gran

425
00:21:03,000 --> 00:21:05,000
camino para llevarlo.

426
00:21:05,000 --> 00:21:07,000
El rendimiento, bueno, esto siempre

427
00:21:07,000 --> 00:21:09,000
es muy típico en las startups,

428
00:21:09,000 --> 00:21:11,000
empezar a hacer

429
00:21:11,000 --> 00:21:13,000
cosas bastante rápido

430
00:21:13,000 --> 00:21:15,000
para encontrar el Market Fit, pero luego

431
00:21:15,000 --> 00:21:17,000
cuando lo enfrentamos a un caso real, una

432
00:21:17,000 --> 00:21:19,000
API que ya no es de demo, aquello

433
00:21:19,000 --> 00:21:21,000
no tira, porque empieza a

434
00:21:21,000 --> 00:21:23,000
apetar los Timeouts por todos los sitios.

435
00:21:23,000 --> 00:21:25,000
Bueno, pues, entonces, en momento de palarse

436
00:21:25,000 --> 00:21:27,000
y refactorizar, pensar en crear

437
00:21:27,000 --> 00:21:29,000
objetos o autorizar en bulk,

438
00:21:29,000 --> 00:21:31,000
tenemos distintas acciones en Django,

439
00:21:31,000 --> 00:21:33,000
medio tiempo en respuesta, las consultas,

440
00:21:33,000 --> 00:21:35,000
hacer joins, bueno, ya

441
00:21:35,000 --> 00:21:37,000
en el caso de ResFrame, Wario y Django

442
00:21:37,000 --> 00:21:39,000
tienen bastantes

443
00:21:39,000 --> 00:21:41,000
documentación y literatura

444
00:21:41,000 --> 00:21:43,000
sobre

445
00:21:43,000 --> 00:21:45,000
cómo implementarlo.

446
00:21:45,000 --> 00:21:47,000
He dejado una librería como loco.

447
00:21:47,000 --> 00:21:49,000
A Pizurlin, como creo que ya

448
00:21:49,000 --> 00:21:51,000
estamos

449
00:21:51,000 --> 00:21:53,000
a límite del tiempo,

450
00:21:53,000 --> 00:21:55,000
no voy a pensar un poco esto, lo breaking

451
00:21:55,000 --> 00:21:57,000
changes, como utilizaba

452
00:21:57,000 --> 00:21:59,000
la filosofía de lo que funcionaba ayer,

453
00:21:59,000 --> 00:22:01,000
debe de funcionar mañana, y cuando algo

454
00:22:01,000 --> 00:22:03,000
vaya a cambiarse, seguir un

455
00:22:03,000 --> 00:22:05,000
plan y comunicarlo con

456
00:22:05,000 --> 00:22:07,000
nuestro usuario. Creo que es uno de los principales

457
00:22:07,000 --> 00:22:09,000
retos que tiene cualquier start-up.

458
00:22:09,000 --> 00:22:11,000
Y justo,

459
00:22:11,000 --> 00:22:13,000
hasta aquí llega la presentación,

460
00:22:13,000 --> 00:22:15,000
espero que les haya gustado,

461
00:22:15,000 --> 00:22:17,000
y les haya dado utilidad,

462
00:22:17,000 --> 00:22:19,000
a continuación, si tienen alguna pregunta

463
00:22:19,000 --> 00:22:21,000
estaré encantado

464
00:22:21,000 --> 00:22:23,000
de intentar ayudarles.

465
00:22:27,000 --> 00:22:29,000
¡Hola Tamás!

466
00:22:29,000 --> 00:22:31,000
Bueno,

467
00:22:31,000 --> 00:22:33,000
bueno, bueno, por la charla, Tomás.

468
00:22:33,000 --> 00:22:35,000
Al final, la voz te respetó,

469
00:22:35,000 --> 00:22:37,000
yo te vi que fuiste a

470
00:22:37,000 --> 00:22:39,000
mejor.

471
00:22:39,000 --> 00:22:41,000
Necesito eso de hablar más.

472
00:22:41,000 --> 00:22:43,000
Exacto, exacto.

473
00:22:43,000 --> 00:22:45,000
Tenías ahí hasta tu tiempo,

474
00:22:45,000 --> 00:22:47,000
¿no? Tenías un

475
00:22:47,000 --> 00:22:49,000
timer.

476
00:22:51,000 --> 00:22:53,000
Perfecto. No sé si hay preguntas por ahí.

477
00:22:55,000 --> 00:22:57,000
Es que, vamos con Triton,

478
00:22:57,000 --> 00:22:59,000
¿sí?

479
00:22:59,000 --> 00:23:01,000
Según desde retardo, la gente escribe después

480
00:23:01,000 --> 00:23:03,000
cuando acaba, entonces cuando acabamos,

481
00:23:03,000 --> 00:23:05,000
hay que rellenar este hueco, ¿no?

482
00:23:09,000 --> 00:23:11,000
Algo,

483
00:23:11,000 --> 00:23:13,000
algún meme te relleno.

484
00:23:13,000 --> 00:23:15,000
Bueno,

485
00:23:15,000 --> 00:23:17,000
creo que es muy interesante

486
00:23:17,000 --> 00:23:19,000
todo esto, ¿verdad?

487
00:23:19,000 --> 00:23:21,000
Por ejemplo, en mi trabajo también utilizamos

488
00:23:21,000 --> 00:23:23,000
APIs y todo esto, hay que tenerlo

489
00:23:23,000 --> 00:23:25,000
muy en cuenta, porque si no

490
00:23:25,000 --> 00:23:27,000
es un desafío que no lo que es, pues no se usan.

491
00:23:27,000 --> 00:23:29,000
Y las cosas que más

492
00:23:29,000 --> 00:23:31,000
interesante, como pareció que has dicho,

493
00:23:31,000 --> 00:23:33,000
que creo que es súper importante,

494
00:23:33,000 --> 00:23:35,000
es compartir la posibilidad

495
00:23:35,000 --> 00:23:37,000
de especificación

496
00:23:37,000 --> 00:23:39,000
con los clientes que van a consumir esa API,

497
00:23:39,000 --> 00:23:41,000
porque a veces decimos,

498
00:23:41,000 --> 00:23:43,000
¡hacemos así la API! Pero luego resulta

499
00:23:43,000 --> 00:23:45,000
que los casos de uso

500
00:23:45,000 --> 00:23:47,000
de la API no, a lo mejor,

501
00:23:47,000 --> 00:23:49,000
no funcionan bien con tu las puestas.

502
00:23:49,000 --> 00:23:51,000
Exacto, pero esto es un desdue que hacer

503
00:23:51,000 --> 00:23:53,000
un millón de llamadas para

504
00:23:53,000 --> 00:23:55,000
que haya una información que necesito.

505
00:23:55,000 --> 00:23:57,000
Y necesito que tengas,

506
00:23:57,000 --> 00:23:59,000
necesitas hacerla específica

507
00:23:59,000 --> 00:24:01,000
para el cliente.

508
00:24:01,000 --> 00:24:03,000
Si tienes esos clientes o ese feedback

509
00:24:03,000 --> 00:24:05,000
cercano, hay que aprovecharlo.

510
00:24:05,000 --> 00:24:07,000
Antes de empezar

511
00:24:07,000 --> 00:24:09,000
a implementar el código y obtener

512
00:24:09,000 --> 00:24:11,000
ese feedback primero.

513
00:24:11,000 --> 00:24:13,000
¿Y Tomás, has utilizado

514
00:24:13,000 --> 00:24:15,000
que ahora está como muy de moda

515
00:24:15,000 --> 00:24:17,000
FAS API, no sé si el has utilizado

516
00:24:17,000 --> 00:24:19,000
en el diseño de API.

517
00:24:19,000 --> 00:24:21,000
No, siempre he trabajado con

518
00:24:21,000 --> 00:24:23,000
Resfrenwar y Django, principalmente porque

519
00:24:23,000 --> 00:24:25,000
al final

520
00:24:25,000 --> 00:24:27,000
vengo de

521
00:24:27,000 --> 00:24:29,000
todo este Django de principio y cuando

522
00:24:29,000 --> 00:24:31,000
he intentado hacer una API con algo más

523
00:24:31,000 --> 00:24:33,000
sencillo, como Async.io o

524
00:24:33,000 --> 00:24:35,000
HTTP o cualquier otro

525
00:24:35,000 --> 00:24:37,000
Frenwar así más sencillo,

526
00:24:37,000 --> 00:24:39,000
al final he hecho en falta muchas

527
00:24:39,000 --> 00:24:41,000
las castillas que ya vienen construidas en el propio Django

528
00:24:41,000 --> 00:24:43,000
y en el propio Resfrenwar, que sea autenticación,

529
00:24:43,000 --> 00:24:45,000
servizadores, validadores, etc.

530
00:24:45,000 --> 00:24:47,000
Y al final digo,

531
00:24:47,000 --> 00:24:49,000
para montar cualquier ejemplo tengo que montar muchos plugins

532
00:24:49,000 --> 00:24:51,000
que acabo montando un Django, pero

533
00:24:51,000 --> 00:24:53,000
por partes, mejor.

534
00:24:53,000 --> 00:24:55,000
Cajo el coche ya montado y me olvido

535
00:24:55,000 --> 00:24:57,000
de hacer de mecánico.

536
00:24:57,000 --> 00:24:59,000
Sí, te entiendo.

537
00:24:59,000 --> 00:25:01,000
Estaría guay, es que

538
00:25:01,000 --> 00:25:03,000
separasen, hay partes

539
00:25:03,000 --> 00:25:05,000
de FAS API, por ejemplo

540
00:25:05,000 --> 00:25:07,000
generación automática

541
00:25:07,000 --> 00:25:09,000
de la documentación

542
00:25:09,000 --> 00:25:11,000
aparte de modos de Piedantic

543
00:25:11,000 --> 00:25:13,000
que lo utiliza,

544
00:25:13,000 --> 00:25:15,000
que es súper guay,

545
00:25:15,000 --> 00:25:17,000
Django se muestra algo parecido, pero creo que se podía

546
00:25:17,000 --> 00:25:19,000
extraer ciertas partes, que están muy bien hechas

547
00:25:19,000 --> 00:25:21,000
en FAS API sin necesidad de usar

548
00:25:21,000 --> 00:25:23,000
todo FAS API. Puedes utilizar Django

549
00:25:23,000 --> 00:25:25,000
con generación automática

550
00:25:25,000 --> 00:25:27,000
de la especificación

551
00:25:27,000 --> 00:25:29,000
sin

552
00:25:29,000 --> 00:25:31,000
pasar por FAS API.

553
00:25:31,000 --> 00:25:33,000
Creo que en algún momento

554
00:25:33,000 --> 00:25:35,000
se podría extraer ciertas partes

555
00:25:35,000 --> 00:25:37,000
que son muy chulas, porque hace que sea

556
00:25:37,000 --> 00:25:39,000
tan guay hacer cosas con FAS API.

557
00:25:39,000 --> 00:25:41,000
Yo que soy muy fan

558
00:25:41,000 --> 00:25:43,000
de Django.

559
00:25:43,000 --> 00:25:45,000
Lo hemos notado, lo hemos notado.

560
00:25:45,000 --> 00:25:47,000
Desde la versión 0.96

561
00:25:47,000 --> 00:25:49,000
trabajando con él, o sea que

562
00:25:49,000 --> 00:25:51,000
he visto crecer desde que no era

563
00:25:51,000 --> 00:25:53,000
ni estable.

564
00:25:53,000 --> 00:25:55,000
Eso es un seguidor, un fan de verdad.

565
00:25:55,000 --> 00:25:57,000
Vale,

566
00:25:57,000 --> 00:25:59,000
pregunta, José Aminan

567
00:25:59,000 --> 00:26:01,000
¿Qué otras recomendaciones

568
00:26:01,000 --> 00:26:03,000
de rendimiento recomiendas

569
00:26:03,000 --> 00:26:05,000
aparte de las que has comentado?

570
00:26:05,000 --> 00:26:07,000
¿Recomendaciones de rendimiento?

571
00:26:07,000 --> 00:26:09,000
No entiendo muy bien la pregunta,

572
00:26:09,000 --> 00:26:11,000
no sé si

573
00:26:11,000 --> 00:26:13,000
va por medidas

574
00:26:13,000 --> 00:26:15,000
que hay que tener en cuenta, medidas que hay que tomar

575
00:26:15,000 --> 00:26:17,000
para poder medir el rendimiento.

576
00:26:17,000 --> 00:26:19,000
No me quedan muy claras.

577
00:26:19,000 --> 00:26:21,000
El propio Django

578
00:26:21,000 --> 00:26:23,000
tiene una sección específica

579
00:26:23,000 --> 00:26:25,000
para cómo optimizar

580
00:26:25,000 --> 00:26:27,000
ciertos puntos, por ejemplo, de la optimización

581
00:26:27,000 --> 00:26:29,000
de queries con los sales related, los prefetch

582
00:26:29,000 --> 00:26:31,000
uso de la caches

583
00:26:31,000 --> 00:26:33,000
que ya está integrada en el propio

584
00:26:33,000 --> 00:26:35,000
Django.

585
00:26:35,000 --> 00:26:37,000
Reds Framework tiene también

586
00:26:37,000 --> 00:26:39,000
ciertas mejoras que se pueden hacer

587
00:26:39,000 --> 00:26:41,000
cuando vas a hacer

588
00:26:41,000 --> 00:26:43,000
un select para recuperar el dato

589
00:26:43,000 --> 00:26:45,000
frente a cosas llamadas que se pueden hacer

590
00:26:45,000 --> 00:26:47,000
para inserirse en el dato.

591
00:26:47,000 --> 00:26:49,000
No sé si es eso el...

592
00:26:49,000 --> 00:26:51,000
Sí, sí, eso que dicen.

593
00:26:51,000 --> 00:26:53,000
Si has sentido también

594
00:26:53,000 --> 00:26:55,000
nosotros trabajados con esto, hay una herramienta

595
00:26:55,000 --> 00:26:57,000
muy útil que es el Django de BackTulbar

596
00:26:57,000 --> 00:26:59,000
que se permite, unos problemas básicos

597
00:26:59,000 --> 00:27:01,000
de Django con los ORMS

598
00:27:01,000 --> 00:27:03,000
es hacer demasiadas queries por las NMX1

599
00:27:03,000 --> 00:27:05,000
y cosas de estas.

600
00:27:05,000 --> 00:27:07,000
Entonces, el Django de BackTulbar

601
00:27:07,000 --> 00:27:09,000
cuando trabajas con APIs

602
00:27:09,000 --> 00:27:11,000
son por ejemplo, tiene un componente

603
00:27:11,000 --> 00:27:13,000
que se llama Django de BackPanel

604
00:27:13,000 --> 00:27:15,000
que también te permite ver esta información

605
00:27:15,000 --> 00:27:17,000
y por ejemplo, tú puedes ver

606
00:27:17,000 --> 00:27:19,000
las queries que se están haciendo a base de datos

607
00:27:19,000 --> 00:27:21,000
y puedes ver si se está

608
00:27:21,000 --> 00:27:23,000
haciendo demasiadas y revidas

609
00:27:23,000 --> 00:27:25,000
y eso te permite para optimizar

610
00:27:25,000 --> 00:27:27,000
porque es lo principal de las cosas que vamos a estar viviendo.

611
00:27:27,000 --> 00:27:29,000
Es algo muy típico en la que comentaba en la start

612
00:27:29,000 --> 00:27:31,000
que tú haces tu endpoint y funcionas todo muy bien

613
00:27:31,000 --> 00:27:33,000
y cuando empieza un cliente a usarlo

614
00:27:33,000 --> 00:27:35,000
empieza a obtener tiempo de rendimiento

615
00:27:35,000 --> 00:27:37,000
después de muy alto y tras el de DjangoTulbar

616
00:27:37,000 --> 00:27:39,000
y ves que está la misma query, echa

617
00:27:39,000 --> 00:27:41,000
mil veces.

618
00:27:41,000 --> 00:27:43,000
Y entonces cuando empiezas a replantear muchas de las cosas

619
00:27:43,000 --> 00:27:45,000
que has hecho y haces esa mejora

620
00:27:45,000 --> 00:27:47,000
que al final con muy poquitos cambios

621
00:27:47,000 --> 00:27:49,000
consigues reducir el 80%

622
00:27:49,000 --> 00:27:51,000
del tiempo de respuesta.

623
00:27:51,000 --> 00:27:53,000
Sí, sí.

624
00:27:53,000 --> 00:27:55,000
Ahí está. Después hay muchos herramientas de monitorización

625
00:27:55,000 --> 00:27:57,000
¿no?

626
00:27:57,000 --> 00:27:59,000
Que puedes poner

627
00:27:59,000 --> 00:28:01,000
Antonio Relic, es muy famosa

628
00:28:01,000 --> 00:28:03,000
y hay otras que te permiten ver cuando llamas a la API

629
00:28:03,000 --> 00:28:05,000
que

630
00:28:05,000 --> 00:28:07,000
cuando tiempo tarda, en qué parte

631
00:28:07,000 --> 00:28:09,000
estás pidiendo el tiempo puedes hacer incluso

632
00:28:09,000 --> 00:28:11,000
ver que queries están dando mucho

633
00:28:11,000 --> 00:28:13,000
y todas estas cosas son la monitorización

634
00:28:13,000 --> 00:28:15,000
cuando pones APIs.

635
00:28:15,000 --> 00:28:17,000
DjangoSill que también está por ahí

636
00:28:17,000 --> 00:28:19,000
para medir.

637
00:28:19,000 --> 00:28:21,000
Eso daría para una charla ¿no?

638
00:28:21,000 --> 00:28:23,000
Con monitorización es

639
00:28:23,000 --> 00:28:25,000
tan importante una vez que pones tu API

640
00:28:25,000 --> 00:28:27,000
para gente externa que digan

641
00:28:27,000 --> 00:28:29,000
tu API no funciona, me va muy lenta

642
00:28:29,000 --> 00:28:31,000
hay que tener que decir no, no, mira

643
00:28:31,000 --> 00:28:33,000
aquí está el cabecito y no va bien

644
00:28:33,000 --> 00:28:35,000
y no es verdad que lo hace, está mal y sabe por qué

645
00:28:35,000 --> 00:28:37,000
está mal porque es que si no

646
00:28:37,000 --> 00:28:39,000
dejo el pagador

647
00:28:39,000 --> 00:28:41,000
Mira Irma, hay una pregunta

648
00:28:41,000 --> 00:28:43,000
aquí por YouTube, no sé si

649
00:28:43,000 --> 00:28:45,000
hay una por

650
00:28:45,000 --> 00:28:47,000
hay una por el chat

651
00:28:47,000 --> 00:28:49,000
que pregunta

652
00:28:49,000 --> 00:28:51,000
bueno, sí, hacemos la del primero de Discord

653
00:28:51,000 --> 00:28:53,000
que era el de este preferente

654
00:28:53,000 --> 00:28:55,000
que dice que para DjangoRes framework

655
00:28:55,000 --> 00:28:57,000
¿qué herramientas de testing recomiendas?

656
00:28:57,000 --> 00:28:59,000
Test Unitarios

657
00:28:59,000 --> 00:29:01,000
los propios

658
00:29:01,000 --> 00:29:03,000
que dice que no hay Django

659
00:29:03,000 --> 00:29:05,000
no me iría

660
00:29:05,000 --> 00:29:07,000
ya puede ser si tienes preferencias por Unister

661
00:29:07,000 --> 00:29:09,000
o por PyTest, depende del gusto que tenga

662
00:29:09,000 --> 00:29:11,000
pero para resfrengo

663
00:29:11,000 --> 00:29:13,000
en principio no haría partes unitarios ¿vale?

664
00:29:13,000 --> 00:29:15,000
únicamente esa parte

665
00:29:15,000 --> 00:29:17,000
luego para si quieres tres más complejos

666
00:29:17,000 --> 00:29:19,000
creo que no sea antes

667
00:29:19,000 --> 00:29:21,000
de un intervio, sino más bien de integración

668
00:29:21,000 --> 00:29:23,000
de interacción pues puedes ir

669
00:29:23,000 --> 00:29:25,000
a liberiar como las que he comentado

670
00:29:25,000 --> 00:29:27,000
he puesto el link de BDD

671
00:29:27,000 --> 00:29:29,000
BDD bueno, BDD no es una filosofía

672
00:29:29,000 --> 00:29:31,000
en sí, no es una librería

673
00:29:31,000 --> 00:29:33,000
pero existen implementaciones de BDD

674
00:29:33,000 --> 00:29:35,000
para resfrengo, de manera que

675
00:29:35,000 --> 00:29:37,000
puedes chequear las respuestas que te va dando

676
00:29:37,000 --> 00:29:39,000
si te dan 200, si te dan 401

677
00:29:39,000 --> 00:29:41,000
si te dan 400

678
00:29:41,000 --> 00:29:43,000
¿qué respuestas? ¿cuál es el de entrada?

679
00:29:43,000 --> 00:29:45,000
¿cuál es el de salida? ¿varydas?

680
00:29:45,000 --> 00:29:47,000
Hacer los assets sobre las respuestas

681
00:29:47,000 --> 00:29:49,000
y sobre los estátuts de esas respuestas

682
00:29:49,000 --> 00:29:51,000
y vas montando un test de navegación

683
00:29:51,000 --> 00:29:53,000
a como, a similar, ¿cómo le haría un usuario

684
00:29:53,000 --> 00:29:55,000
en un frontal

685
00:29:55,000 --> 00:29:57,000
con cualquier aplicación

686
00:29:57,000 --> 00:29:59,000
que pues un Vivo o cualquiera?

687
00:29:59,000 --> 00:30:01,000
principalmente

688
00:30:01,000 --> 00:30:03,000
principalmente eso y luego el paquete

689
00:30:03,000 --> 00:30:05,000
que he comentado de Schematesis

690
00:30:05,000 --> 00:30:07,000
también bastante potente

691
00:30:07,000 --> 00:30:09,000
pero no es propio de

692
00:30:09,000 --> 00:30:11,000
de refrengo, sino que es más a nivel de API

693
00:30:11,000 --> 00:30:13,000
y OpenAPI como especificación

694
00:30:13,000 --> 00:30:15,000
¡Ataca! Lo que va a ser que te valida

695
00:30:15,000 --> 00:30:17,000
que tu proyecto cumple

696
00:30:17,000 --> 00:30:19,000
la especificación OpenAPI que todo ha dicho

697
00:30:19,000 --> 00:30:21,000
que debe de cumplir

698
00:30:21,000 --> 00:30:23,000
muy guay

699
00:30:23,000 --> 00:30:25,000
son la pregunta también que hacen por

700
00:30:25,000 --> 00:30:27,000
por YouTube que preguntan

701
00:30:27,000 --> 00:30:29,000
si preguntan Mr. Programador Web

702
00:30:29,000 --> 00:30:31,000
o si son en la pantalla

703
00:30:31,000 --> 00:30:33,000
¿si? ¿cómo trabajas con los WebSockets?

704
00:30:33,000 --> 00:30:35,000
¿cómo trabajas con WebSockets?

705
00:30:35,000 --> 00:30:37,000
¿cómo trabajas con WebSockets?

706
00:30:37,000 --> 00:30:39,000
¿cómo trabajas con WebSockets?

707
00:30:39,000 --> 00:30:41,000
bueno, creo que se va un poco

708
00:30:41,000 --> 00:30:43,000
del tema API REST

709
00:30:43,000 --> 00:30:45,000
yo personalmente

710
00:30:45,000 --> 00:30:47,000
tengo dos lineas de trabajo

711
00:30:47,000 --> 00:30:49,000
para WebSockets

712
00:30:49,000 --> 00:30:51,000
uno es el propio que viene

713
00:30:51,000 --> 00:30:53,000
interado en tu de Django

714
00:30:53,000 --> 00:30:55,000
que la otra vez ya lo han incluido

715
00:30:55,000 --> 00:30:57,000
dentro de ese

716
00:30:57,000 --> 00:30:59,000
movimiento de Django hacer parte de

717
00:30:59,000 --> 00:31:01,000
asignronía, entonces ya tenemos

718
00:31:01,000 --> 00:31:03,000
cosas asignronas y WebSockets

719
00:31:03,000 --> 00:31:05,000
en Django y luego

720
00:31:05,000 --> 00:31:07,000
aparte si no te encaja

721
00:31:07,000 --> 00:31:09,000
bien la filosofía de WebSockets

722
00:31:09,000 --> 00:31:11,000
que tiene implementada

723
00:31:11,000 --> 00:31:13,000
metada Django que a veces no encaja

724
00:31:13,000 --> 00:31:15,000
por cómo está diseñado, yo me voy a

725
00:31:15,000 --> 00:31:17,000
a otras librerías como por ejemplo

726
00:31:17,000 --> 00:31:19,000
SocketsArk, es una librería también

727
00:31:19,000 --> 00:31:21,000
bastante potente y funciona muy bien

728
00:31:21,000 --> 00:31:23,000
porque funciona como un servicio totalmente independiente

729
00:31:23,000 --> 00:31:25,000
no tiene ningún tipo

730
00:31:25,000 --> 00:31:27,000
de acople con Django

731
00:31:27,000 --> 00:31:29,000
y se gestiona todo a través

732
00:31:29,000 --> 00:31:31,000
de Redis como conexión

733
00:31:31,000 --> 00:31:33,000
entre los dos servicios de WebSockets

734
00:31:33,000 --> 00:31:35,000
y de Django

735
00:31:35,000 --> 00:31:37,000
muy bien

736
00:31:37,000 --> 00:31:39,000
pues nada Irán

737
00:31:39,000 --> 00:31:41,000
yo creo que ya poco más

738
00:31:41,000 --> 00:31:43,000
no, ya, dejamos aquí

739
00:31:43,000 --> 00:31:45,000
estamos aquí, muchas gracias

740
00:31:45,000 --> 00:31:47,000
muchas gracias Tomá

741
00:31:47,000 --> 00:31:49,000
por invitarme a estar aquí

742
00:31:49,000 --> 00:31:51,000
en este gran evento

743
00:31:51,000 --> 00:31:53,000
seguimos por Discord

744
00:31:53,000 --> 00:31:55,000
muy bien, muchas gracias

745
00:31:55,000 --> 00:32:21,000
nos vemos, nos vemos, nos vemos, nos vemos

