1
00:00:00,000 --> 00:00:10,120
ập

2
00:00:11,040 --> 00:00:18,020
ivity

3
00:00:18,020 --> 00:00:33,020
Bien, pues mi nombre es Palo Teague Miral, esta charla mutable es inutable y problemas quéticos.

4
00:00:33,020 --> 00:00:48,020
Soy Kenyos Ophar en Sky Scanner, soy para los compañeros para que no os descubríis y vamos allá.

5
00:00:48,020 --> 00:00:56,020
De hecho, como os decía, la charla podríamos haberla titulado de este modo, que es un poco bastante largo.

6
00:00:56,020 --> 00:01:06,020
Y no vende tanto, pero podría ser algo así como errores típicos cuando tratamos con objetos mutables

7
00:01:06,020 --> 00:01:11,020
y no tenemos un pleno entendimiento de lo que hace Python por dentro.

8
00:01:11,020 --> 00:01:13,020
Muy largo, ¿no?

9
00:01:13,020 --> 00:01:21,020
Pero en definitiva, de hecho lo más importante es hablar de algunos Python Internals, ¿vale?,

10
00:01:21,020 --> 00:01:28,020
algunas partes de Python que es importante entender para saber por qué están ocurriendo esos errores típicos.

11
00:01:28,020 --> 00:01:33,020
Es lo que vamos a hacer aquí, ¿vale?, en realidad lo que vamos a ver es ver cinco conceptos clave

12
00:01:33,020 --> 00:01:38,020
que son bastante importantes que se entiendan y, sobre todo, para... entiendo que es el track básico,

13
00:01:38,020 --> 00:01:43,020
o sea que entiendo que se hacía un poco novatillos, se estaréis aprendiendo con Python,

14
00:01:43,020 --> 00:01:48,020
sí que es importante que los empecéis a dominar estos conceptos.

15
00:01:48,020 --> 00:01:57,020
Este es bastante fácil, ¿vale?, un objeto inmutable que tiene un valor que es de sólo lectura.

16
00:01:57,020 --> 00:02:03,020
Se entiende, ¿no?, sólo lectura, no podéis modificar el valor del objeto.

17
00:02:03,020 --> 00:02:11,020
Sin embargo, qué objetos, como ejemplo, números, strings, booleanos, tuplas, ¿algún le choca esto?

18
00:02:11,020 --> 00:02:19,020
Os lo diréis, aún entero le puede cambiar el valor, ¿no?, a cualquier número, one floor.

19
00:02:19,020 --> 00:02:23,020
Veamos este ejemplo.

20
00:02:23,020 --> 00:02:30,020
¿Conoceis la función ide? ¿La conocéis? Sí, levanta la mano, ¿alguien la conoce?

21
00:02:30,020 --> 00:02:38,020
Bueno, para el resto, para la mitad más o menos, ide lo que haces es que te da el identificador único de un objeto,

22
00:02:38,020 --> 00:02:43,020
dentro de tu ejecución de Python. Pues cuando vuelvas a ejecutarlo, el ide sea distinto.

23
00:02:43,020 --> 00:02:47,020
Pero tú sabes que en ese momento si algo está corriendo, pues eso es único.

24
00:02:47,020 --> 00:02:53,020
No se suele utilizar, como mucho lo utilizaréis, algún día estáis divulgando y no acabáis de entender algo.

25
00:02:53,020 --> 00:02:59,020
Pero, por lo general, nunca la usas, excepto cuando pones una presentación, una slide, una charla,

26
00:02:59,020 --> 00:03:03,020
y así es bastante más visual. Vale, da un número horrible.

27
00:03:03,020 --> 00:03:10,020
No lo hagáis mucho caso con que mireis los dos últimos dígitos, ya podéis ver en qué caso se ide y cambia, en qué casos no, ¿vale?

28
00:03:10,020 --> 00:03:19,020
Si lo hagan las primeras líneas, todo parece normal, ¿no? Creamos dos enteros, les asignamos el valor 7, y ambos tienen el mismo ide.

29
00:03:19,020 --> 00:03:24,020
Podría chocarnos, de hecho, el hecho de que ambos tienen el mismo ide,

30
00:03:24,020 --> 00:03:30,020
quiere decir que son el mismo objeto, ambos, cuando en realidad tienen dos nombres.

31
00:03:30,020 --> 00:03:34,020
¿Lo veis esto? Vamos a verlo poco a poco, ¿vale?

32
00:03:34,020 --> 00:03:42,020
Y luego lo que hacemos es que a cada uno le damos un valor distinto, y entonces, como veis abajo, en el cuadro verde,

33
00:03:42,020 --> 00:03:47,020
pasan a tener un ide distinto. Se ve un poco escura, se ve bien.

34
00:03:47,020 --> 00:03:49,020
Vuelvo al anterior.

35
00:03:49,020 --> 00:03:56,020
¿Vale? Como veis, al final, cada uno pasa a tener un ide distinto, es decir, al principio, tener un ide que era el mismo y luego pasa a ser un ide distinto.

36
00:03:56,020 --> 00:04:01,020
¿Qué está ocurriendo aquí?

37
00:04:01,020 --> 00:04:06,020
Lo que ocurre es este concepto.

38
00:04:06,020 --> 00:04:12,020
Los nombres o atributos son menos punteros.

39
00:04:12,020 --> 00:04:16,020
Es como tú llamas a un objeto.

40
00:04:16,020 --> 00:04:20,020
¿Vale? Un nombre en Python apunta a un objeto.

41
00:04:20,020 --> 00:04:29,020
Si volvemos al ejemplo, en la primera línea estamos creando dos nombres, dos etiquetas o dos atributos que en realidad son punteros a un mismo objeto,

42
00:04:29,020 --> 00:04:33,020
que es un entero con valor 7.

43
00:04:33,020 --> 00:04:36,020
Por eso ambos son el mismo objeto, porque están apuntando al mismo objeto.

44
00:04:36,020 --> 00:04:39,020
¿Lo entendéis esto?

45
00:04:39,020 --> 00:04:42,020
¿Sí, se entiende? ¿Seguro?

46
00:04:42,020 --> 00:04:44,020
¿Vale? ¿Qué ocurre luego?

47
00:04:44,020 --> 00:04:51,020
Aplicar exactamente lo mismo. Si le asigno un objeto distinto a cada uno de los dos nombres, a cada una de las dos etiquetas,

48
00:04:51,020 --> 00:04:55,020
pasan a ser objetos distintos.

49
00:04:55,020 --> 00:04:58,020
¿Sí?

50
00:04:58,020 --> 00:05:04,020
Por eso decimos que el igual, lo que haces es copiar la referencia.

51
00:05:04,020 --> 00:05:07,020
No copia el valor.

52
00:05:07,020 --> 00:05:12,020
¿Sí?

53
00:05:12,020 --> 00:05:17,020
Si lo asocias al mismo puntero, sí.

54
00:05:17,020 --> 00:05:22,020
Si ahora aquí dijera otra vez, íntegra igual a íntegra B.

55
00:05:22,020 --> 00:05:26,020
Pero si volvemos a valor 7, no es el mismo puntero.

56
00:05:26,020 --> 00:05:29,020
Sí, pero esto ya es del track complejo.

57
00:05:29,020 --> 00:05:36,020
Python reaprovecha a veces los mismos objetos, porque como son inmutables, Python los reaprovecha.

58
00:05:36,020 --> 00:05:42,020
Hay algún ejemplo y un poco bueno. Pero sí, básicamente lo reaprovecha.

59
00:05:42,020 --> 00:05:45,020
Pero si tú haces como el primer ejemplo, lo que haces es estar copiando las referencias.

60
00:05:45,020 --> 00:05:49,020
En la primera línea lo único que copias o asignas son referencias.

61
00:05:49,020 --> 00:05:55,020
Dices, todos estos nombres íntegra e íntegra B apuntan a 7.

62
00:05:55,020 --> 00:05:57,020
¿Vale?

63
00:05:57,020 --> 00:06:01,020
Con lo cual el igual lo que haces es copiar la referencia, copiar donde estamos apuntando.

64
00:06:01,020 --> 00:06:08,020
Veamos otro ejemplo.

65
00:06:08,020 --> 00:06:15,020
Y aquí hay alguna diferencia. ¿Sabéis lo que hace append y extend?

66
00:06:15,020 --> 00:06:20,020
Append en esta línea.

67
00:06:20,020 --> 00:06:24,020
Append lo que hace es añadir a una lista un elemento al final.

68
00:06:24,020 --> 00:06:28,020
En la primera línea estoy creando una lista.

69
00:06:28,020 --> 00:06:34,020
¿Cuántas listas tengo en la primera línea?

70
00:06:34,020 --> 00:06:37,020
¿Cuántas? Una.

71
00:06:37,020 --> 00:06:41,020
Hay una, pero dos nombres con la misma lista.

72
00:06:41,020 --> 00:06:47,020
Pero recordemos el igual solo ha copiado la referencia.

73
00:06:47,020 --> 00:06:54,020
Y solo creo un objeto que es la parte más a la derecha de esta sentencia.

74
00:06:54,020 --> 00:07:05,020
Entonces en esta línea cojo list A y le añado el entero número 7 al final.

75
00:07:05,020 --> 00:07:13,020
Luego aquí creo otra lista, list C y le hago extend. ¿Sabéis lo que hace extend?

76
00:07:13,020 --> 00:07:16,020
No, añade todos los elementos.

77
00:07:16,020 --> 00:07:20,020
Añade todos los elementos de una lista a la otra.

78
00:07:20,020 --> 00:07:26,020
Entonces fijaos el valor final.

79
00:07:26,020 --> 00:07:32,020
List A y list B contienen lo mismo. ¿Por qué?

80
00:07:32,020 --> 00:07:36,020
¿Cómo? Vamos.

81
00:07:36,020 --> 00:07:42,020
Son el mismo objeto. ¿Vale? Lo hemos visto aquí.

82
00:07:42,020 --> 00:07:45,020
Son el mismo objeto. Con lo cual acabamos teniendo lo mismo dentro.

83
00:07:45,020 --> 00:07:56,020
Es un problema super fácil de que la liemos con nuestro código si no sabéis que esto ocurre.

84
00:07:56,020 --> 00:08:05,020
¿Vale? Fijaos en esto. Tiene el mismo ID, por lo tanto son el mismo objeto.

85
00:08:05,020 --> 00:08:13,020
Y luego hago lo que se llama modificación in place.

86
00:08:13,020 --> 00:08:17,020
Entonces cojo el mismo objeto y dentro suyo cambia el contenido.

87
00:08:17,020 --> 00:08:24,020
¿Por qué? Porque la lista es un objeto mutable.

88
00:08:24,020 --> 00:08:29,020
Quiere decir que podemos cambiar su valor o su contenido mientras que uno entero

89
00:08:29,020 --> 00:08:32,020
cómo le cambiábamos el valor al entero con el igual.

90
00:08:32,020 --> 00:08:41,020
Entonces el igual no es cambiar el valor, es asignarlo a otro distinto.

91
00:08:41,020 --> 00:08:46,020
Por lo cual aquí veis un problema bastante fácil de reproducir.

92
00:08:46,020 --> 00:08:51,020
Si copiáis la referencia a un objeto mutable y luego le modificáis el contenido,

93
00:08:51,020 --> 00:08:56,020
estáis cambiando el contenido en las dos referencias, en los dos nombres.

94
00:08:56,020 --> 00:08:59,020
Porque en realidad solo hay un objeto.

95
00:08:59,020 --> 00:09:05,020
¿Vale? Cuando veáis liadas de este estilo, pues es cuando lo mejor podéis abrir el debugger de turno.

96
00:09:05,020 --> 00:09:09,020
Si tenéis un ID bonito como Python, Python o algún así,

97
00:09:09,020 --> 00:09:13,020
probablemente ya veréis en el propio ID que solo hay un objeto en vuestra memoria,

98
00:09:13,020 --> 00:09:21,020
pero si no podéis imprimir ID y veréis que en realidad es que estáis modificando el mismo objeto.

99
00:09:21,020 --> 00:09:26,020
¿Vale? Se entiende hasta ahora, se vea problemática.

100
00:09:26,020 --> 00:09:32,020
¿Para cuántos de vosotros esto no es normal que ocurra así?

101
00:09:32,020 --> 00:09:35,020
¿Vale? ¿Antón a la mano? ¿Nada en serio?

102
00:09:35,020 --> 00:09:44,020
Todos lo dominabais esto. Voy a casa, si no, no hago nada aquí.

103
00:09:44,020 --> 00:09:47,020
Más ejemplos de modificaciones in place.

104
00:09:47,020 --> 00:09:50,020
En la lista hemos visto que tenemos appen para añadir elementos al final.

105
00:09:50,020 --> 00:09:52,020
Los diccionarios son mutables también.

106
00:09:52,020 --> 00:09:59,020
Los diccionarios, que son hash maps, les añadimos y les quitamos claves.

107
00:09:59,020 --> 00:10:02,020
Estáis operando sobre el contenido del mismo objeto, es decir, lo cambiáis,

108
00:10:02,020 --> 00:10:06,020
aunque sigue siendo el mismo objeto, lo mismo con un set.

109
00:10:06,020 --> 00:10:13,020
¿Vale?

110
00:10:13,020 --> 00:10:18,020
Bueno, pues como decíais que esto lo estáis entendiendo, responde a la pregunta.

111
00:10:18,020 --> 00:10:26,020
¿Cuál es el valor esperado, el resultado esperado de este print que hay en la última línea?

112
00:10:26,020 --> 00:10:38,020
¿Qué esperáis que ocurra aquí?

113
00:10:38,020 --> 00:10:55,020
¿Alguien se atreve?

114
00:10:55,020 --> 00:11:00,020
¿Queréis pegatinas?

115
00:11:00,020 --> 00:11:05,020
¿Alguien entiende qué ocurre aquí?

116
00:11:05,020 --> 00:11:09,020
Lo explicamos, todo el mundo entiende el código, al menos que crea una clase

117
00:11:09,020 --> 00:11:13,020
y luego creo dos instancias de la misma clase, ¿hasta aquí bien?

118
00:11:13,020 --> 00:11:16,020
¿Qué característica tiene esta clase?

119
00:11:16,020 --> 00:11:19,020
Miramos la segunda línea del ejemplo, esta de aquí.

120
00:11:19,020 --> 00:11:21,020
¿Qué es esto?

121
00:11:21,020 --> 00:11:25,020
Un atributo de clase, muy bien.

122
00:11:25,020 --> 00:11:27,020
¿Y qué ocurre?

123
00:11:27,020 --> 00:11:35,020
Luego tenemos una función que modifica el atributo de clase.

124
00:11:35,020 --> 00:11:43,020
Modifica, quiere decir, que estamos bajando sobre un atributo mutable.

125
00:11:43,020 --> 00:11:52,020
Y entonces aquí es cuando hay algo nuevo que aprender y es el hecho de que los atributos de clase

126
00:11:52,020 --> 00:12:01,020
sólo existen una sola vez y se guardan en la clase, no en cada instancia.

127
00:12:01,020 --> 00:12:02,020
¿Qué quiere decir esto?

128
00:12:02,020 --> 00:12:07,020
Que yo podría crear aquí mil instancias como estas

129
00:12:07,020 --> 00:12:15,020
y todas seguirían compartiendo el mismo atributo de clase porque sólo existe una vez.

130
00:12:15,020 --> 00:12:20,020
Por lo tanto, aquí la estamos lidando gorda porque entre todos estamos modificando lo de lo mismo.

131
00:12:20,020 --> 00:12:24,020
Podría ser que os interesara compartir algún tipo de información entre cada instancia,

132
00:12:24,020 --> 00:12:29,020
pero no solo es lo habitual, por eso creáis que son las instancias, ¿no?

133
00:12:29,020 --> 00:12:40,020
Hacemos un poco más esto. Fijaos en los ideas.

134
00:12:40,020 --> 00:12:46,020
Aunque las instancias, el objeto de la clase es distinto,

135
00:12:46,020 --> 00:12:51,020
lo que sí es lo mismo, veis aquí, imprimo el atributo de clase, el ID,

136
00:12:51,020 --> 00:12:58,020
y nos sale que en ambos casos lo veis, es el mismo ID.

137
00:12:58,020 --> 00:13:02,020
Todas las instancias tienen el mismo atributo de clase.

138
00:13:02,020 --> 00:13:06,020
¿Vale? ¿Os quedáis con la idea?

139
00:13:06,020 --> 00:13:12,020
Por lo tanto, es peligroso usar objetos mutables con atributos de clase.

140
00:13:12,020 --> 00:13:17,020
O no, podría saliros bien si es lo que esperáis, pero tenéis que esperar que ocurra esto,

141
00:13:17,020 --> 00:13:21,020
que lo cambiesen un lado y en otro lado estés viendo lo mismo.

142
00:13:21,020 --> 00:13:24,020
¿Vale?

143
00:13:24,020 --> 00:13:27,020
¿Cuántos lo habríais liado con esto?

144
00:13:27,020 --> 00:13:30,020
¿Cuántos más? Bien, vamos progresando.

145
00:13:30,020 --> 00:13:34,020
Bueno, aquí con colorines, que hemos quedado que no se ven muy bien, ¿no?

146
00:13:34,020 --> 00:13:36,020
Pero es lo mismo, ¿vale?

147
00:13:36,020 --> 00:13:45,020
Sin embargo, hay algo importante, y es esta línea que hay debajo.

148
00:13:45,020 --> 00:13:54,020
El objeto se ha creado en tiempo de importación, eso es muy importante.

149
00:13:54,020 --> 00:13:58,020
¿Qué quiere decir esto?

150
00:13:58,020 --> 00:14:05,020
Que Python coge el código y lo lee en el momento de importar un módulo, un fichero nuevo.

151
00:14:05,020 --> 00:14:08,020
¿Y qué hace? Pues lo interpreta.

152
00:14:08,020 --> 00:14:12,020
Y eso quiere decir que crea todo lo que hay ahí dentro.

153
00:14:12,020 --> 00:14:19,020
Si hay una función, crea lo que sea necesario para tener esa función disponible para ti ejecutarla.

154
00:14:19,020 --> 00:14:24,020
Si hay una clase, hace lo mismo. Y si esa clase tiene un atributo de clase, ¿qué hace?

155
00:14:24,020 --> 00:14:26,020
Lo crea.

156
00:14:26,020 --> 00:14:33,020
Y el momento en que tú importas una clase, esa clase ya está disponible para que tú puedas crear instancias,

157
00:14:33,020 --> 00:14:38,020
lo cual implica que todos esos atributos de clase ya se han creado.

158
00:14:38,020 --> 00:14:45,020
Si queréis probarlo en casa, crea un atributo de clase que sea una fecha.

159
00:14:45,020 --> 00:14:51,020
Lo creáis, hacéis un slip de 10 segundos y miráis que fecha tenéis como valor de atributo de clase.

160
00:14:51,020 --> 00:14:57,020
Y veréis que esa fecha solo se ha iniciado una vez que ha sido en el momento en que ha importado el módulo.

161
00:14:57,020 --> 00:15:10,020
Y lo puedes hacer con la consola misma.

162
00:15:10,020 --> 00:15:13,020
¿Queda claro esto?

163
00:15:13,020 --> 00:15:17,020
El código Python se interpreta en el momento de importarlo.

164
00:15:17,020 --> 00:15:21,020
Esto no quiere decir que ejecutéis las funciones en el momento de importarlo, ¿no?

165
00:15:21,020 --> 00:15:24,020
Las funciones ejecutan cuando tú las llamas.

166
00:15:24,020 --> 00:15:30,020
Pero esa función ya se ha paseado y se ha interpretado en ese instante.

167
00:15:30,020 --> 00:15:35,020
Y esto incluye, por lo tanto, la creación de los objetos.

168
00:15:35,020 --> 00:15:40,020
¿Se entiende un poco complejo?

169
00:15:40,020 --> 00:15:45,020
Le damos otro ejemplo.

170
00:15:45,020 --> 00:15:54,020
De nuevo una pregunta. ¿Qué valor esperáis que haya aquí?

171
00:15:54,020 --> 00:16:00,020
¿Estáis familiarizados con la primera línea? ¿Sabéis lo que es? ¿Es igual?

172
00:16:00,020 --> 00:16:03,020
Es un valor por defecto del argumento.

173
00:16:03,020 --> 00:16:05,020
¿Qué quiere decir un valor por defecto del argumento?

174
00:16:05,020 --> 00:16:12,020
Lo quiere decir que si tú no lo probes, Python utilizará eso que haya ahí.

175
00:16:12,020 --> 00:16:17,020
Ahora veremos un poquito más sobre eso.

176
00:16:17,020 --> 00:16:32,020
¿Qué tenemos una función que añade a una lista el valor de calcular la potencia entre los dos enteros?

177
00:16:32,020 --> 00:16:37,020
Si le paso dos y tres, pues dos elevado a tres es ocho.

178
00:16:37,020 --> 00:16:41,020
Le paso dos y cuatro, dos elevado a cuatro es dieciséis.

179
00:16:41,020 --> 00:16:46,020
Hasta aquí pues pinta bastante bien.

180
00:16:46,020 --> 00:17:02,020
Luego hacemos esto. ¿Qué ocurre aquí?

181
00:17:02,020 --> 00:17:06,020
¿He echado un vistazo a esta línea? ¿Esperabais esto?

182
00:17:06,020 --> 00:17:21,020
Quizás si porque esperáis que hubiera trampa. ¿Qué está ocurriendo?

183
00:17:21,020 --> 00:17:24,020
Eso es lo que te esperabas.

184
00:17:24,020 --> 00:17:27,020
Repito lo que decía hace un momento con los atributos de clase.

185
00:17:27,020 --> 00:17:30,020
¿Cuándo se crean los atributos de clase?

186
00:17:30,020 --> 00:17:41,020
Una sola vez en tiempo de importación. O cuando, digamos, cuando Python parsea ese código que tú has escrito, ese objeto se crea.

187
00:17:41,020 --> 00:17:50,020
Por lo tanto, ¿esta lista cuándo se crea?

188
00:17:50,020 --> 00:17:53,020
Cuando se define la función, sólo una vez.

189
00:17:53,020 --> 00:18:01,020
Sólo hay una lista ahí. Porque lo que tú estás esperando es que cada vez que tú llamas a la función, Python ejecute eso que hay allí.

190
00:18:01,020 --> 00:18:05,020
Eso es lo que te esperabas, ¿verdad? Pero eso no es lo que ocurre.

191
00:18:05,020 --> 00:18:10,020
Python no coge y dice, ¿ah, vale? Cada vez que me llamen a la función, ¿quién?

192
00:18:10,020 --> 00:18:15,020
Yo me voy a guardar este trocito de código, porque en el fondo aquí tú puedes poner una expresión.

193
00:18:15,020 --> 00:18:21,020
Yo pongo los dos corchetes cuadrados que te crean una lista, pero podrías llamar a una función, que esto se conectara a una base de datos,

194
00:18:21,020 --> 00:18:24,020
que te cargará datos y que estuviera a cinco minutos haciendo cosas.

195
00:18:24,020 --> 00:18:27,020
¿Y cuándo ocurriría eso?

196
00:18:27,020 --> 00:18:33,020
Cuando Python evalúa el código, cuando lo importa o cuando tú se le escribes en la consola interactiva.

197
00:18:33,020 --> 00:18:40,020
En ese instante, la expresión que hay aquí a la derecha del igual se ejecuta.

198
00:18:40,020 --> 00:18:46,020
Sólo en ese instante.

199
00:18:46,020 --> 00:18:51,020
¿Sí, queda claro este tema? Es exactamente lo mismo que el atributo de clase al final.

200
00:18:51,020 --> 00:18:56,020
Quizá lo que esperabas era que el atributo de clase se creara cada vez para cada instancia.

201
00:18:56,020 --> 00:18:58,020
No, no ocurre eso.

202
00:18:58,020 --> 00:19:04,020
Del mismo modo que aquí no ocurre que esta expresión, que es el valor por defecto del argumento de la función,

203
00:19:04,020 --> 00:19:09,020
se ejecute cada vez que tú llamas a la función y no lo provees. No, no ocurre eso.

204
00:19:09,020 --> 00:19:23,020
De hecho, fijaos en esto. No sé si alguna vez lo habéis oído, pero en Python todos son objetos, todo.

205
00:19:23,020 --> 00:19:31,020
Incluso una función, una vez Python la evalúa, lee tu código, lo parsea y entiende que esa es una función,

206
00:19:31,020 --> 00:19:34,020
incluso esa función es un objeto.

207
00:19:34,020 --> 00:19:45,020
Y ese objeto tiene atributos. Y los atributos, uno de ellos es los valores por defecto de los argumentos.

208
00:19:45,020 --> 00:19:49,020
Aquí ya nos podemos ir muy lejos, pero vamos a pararlo aquí, ¿vale?

209
00:19:49,020 --> 00:19:56,020
Pero se entiende el concepto, Python coge, evalúa la expresión en el momento que lo lee y punto, se acaba y la historia.

210
00:19:56,020 --> 00:20:06,020
Y si a eso le añadimos el hecho que tenemos un objeto mutable, es decir, un objeto que podáis cambiar su contenido, la aliamos.

211
00:20:14,020 --> 00:20:22,020
¿Vale? Lo que os decía. En fun defaults, como la función es un objeto, podéis llegar a ver qué es lo que está ahí dentro definido.

212
00:20:22,020 --> 00:20:27,020
Y ese objeto ya está ahí y ya existe, igual que los atributos de clase.

213
00:20:27,020 --> 00:20:31,020
¿Vale? Nos saltamos al colorcito.

214
00:20:33,020 --> 00:20:35,020
¿Todavía hay más?

215
00:20:35,020 --> 00:20:55,020
Fijaos en este caso, perdón, me pasa rápido. ¿Qué está ocurriendo?

216
00:20:55,020 --> 00:21:06,020
Estamos llamando la función y le proveemos una lista.

217
00:21:06,020 --> 00:21:11,020
Nadie ha dado cuenta de esto, pero esto también en otros lenguajes no funciona así.

218
00:21:11,020 --> 00:21:20,020
O podría no funcionar así. Lo que le estamos pasando aquí a Python es una referencia a nuestra lista inicial.

219
00:21:20,020 --> 00:21:36,020
Cuando llamáis en la función, lo único que se están pasando son referencias a todos los objetos que tienes en ese instante de tu ejecución en que llamas a la función.

220
00:21:36,020 --> 00:21:51,020
Y por lo tanto, si le pasáis un objeto mutable a una función, desde dentro de la función, podéis modificar el objeto mutable y no os hace falta ni siquiera devolverlo.

221
00:21:51,020 --> 00:21:54,020
¿Vale? Os fijáis aquí que no recojo el valor de retorno.

222
00:21:54,020 --> 00:21:59,020
¿Sabéis fijado que no estoy recogiendo el valor de retorno en ningún sitio?

223
00:21:59,020 --> 00:22:08,020
Me da igual el valor de retorno porque ya se ha modificado el contenido del objeto. ¿Qué es el valor del retorno?

224
00:22:08,020 --> 00:22:14,020
¿Alguien lo sabe que es eso que se retorna? Otra referencia, correcto.

225
00:22:14,020 --> 00:22:28,020
Cuando llamas a la función, le pasas una referencia a tu lista y lo que te devuelve es otra referencia a un objeto que está en la memoria de Python.

226
00:22:28,020 --> 00:22:33,020
¿Cómo podemos evitar estos problemas? Pues veamos algunas soluciones.

227
00:22:33,020 --> 00:22:37,020
¿Conocéis lo que es underscore underscore init?

228
00:22:37,020 --> 00:22:44,020
Sí, es la función que se llama cada vez que se inicializa una instancia de una de vuestras clases.

229
00:22:44,020 --> 00:22:55,020
Pues si realmente queréis tener una lista que no se comparta entre todas vuestras instancias, lo que tenéis que hacer es añadir ese objeto como un atributo de instancia.

230
00:22:55,020 --> 00:23:03,020
Aquí. Y no como un atributo de clase que es lo que sí estaba haciendo antes, que es lo que es cerróneo o puede conducir a problemas.

231
00:23:03,020 --> 00:23:11,020
Si realmente quieres un atributo única y exclusivamente para tu instancia, créalo cada vez que creas la instancia. Esta es la manera de hacerlo.

232
00:23:11,020 --> 00:23:24,020
Lo mismo aplica aquí. Recordáis el valor por defecto cuando llamamos a la función.

233
00:23:24,020 --> 00:23:32,020
Si lo que tú quieres es que crees una lista nueva cada vez que tú llamas a la función, ¿qué has de hacer?

234
00:23:32,020 --> 00:23:34,020
Crear la lista nueva tú.

235
00:23:34,020 --> 00:23:42,020
Te pones algo para saber si te han proveído en ese valor, en este caso es non.

236
00:23:42,020 --> 00:23:47,020
Y luego dentro miramos, ah, que nos han pasado non.

237
00:23:47,020 --> 00:23:50,020
Pues entonces yo creo una lista nueva y lo la devuelvo.

238
00:23:50,020 --> 00:23:55,020
De este modo cada vez que se llama la función se creará la lista nueva porque eso es lo que queremos.

239
00:23:55,020 --> 00:23:57,020
¿Verdad?

240
00:23:57,020 --> 00:24:01,020
Insisto, puede ser que lo que quieras sea el otro modo de funcionar.

241
00:24:01,020 --> 00:24:04,020
Pero normalmente no es lo más natural.

242
00:24:04,020 --> 00:24:12,020
Y probablemente si trabajas en un equipo y empiezas a hacer estas cosas, pues aún tus compañeros van a utilizar tus funciones y serían unas sorpresas interesantes.

243
00:24:15,020 --> 00:24:20,020
En este caso de hecho, lo he visto mucho también con fechas.

244
00:24:20,020 --> 00:24:33,020
Gente pone fechas aquí como si fuera dado por defecto, esperando que llamando al módulo de fechas de Python, DateTime y generando una fecha nueva.

245
00:24:33,020 --> 00:24:37,020
Esperando que se genera una fecha nueva cada vez que llamas a la función.

246
00:24:37,020 --> 00:24:41,020
No, eso no ocurre, se crea la fecha una sola vez y ahí se queda para siempre.

247
00:24:41,020 --> 00:24:43,020
¿Verdad?

248
00:24:49,020 --> 00:24:51,020
¿Verdad?

249
00:24:51,020 --> 00:25:03,020
Para resumir, lo que se llama Shalucopy es que básicamente lo único que se copia es la referencia al objeto.

250
00:25:03,020 --> 00:25:07,020
Recordemos que un nombre solo es una referencia.

251
00:25:07,020 --> 00:25:12,020
Si copias con igual o pasas como argumento, solo estás pasando referencias.

252
00:25:12,020 --> 00:25:18,020
Con lo cual si tu objeto es mutable, siempre puedes seguir modificando el contenido del mismo objeto, para bien y para mal.

253
00:25:18,020 --> 00:25:20,020
Eso ya depende de vosotros.

254
00:25:20,020 --> 00:25:32,020
Si lo que haces es una función que modifica el contenido de los objetos que recibe, al menos poned una documentación bonita que lo advierta y diga, ten cuidado que lo que le paséis como entrada va a ser modificado.

255
00:25:32,020 --> 00:25:35,020
No es algo que sea muy normal.

256
00:25:35,020 --> 00:25:38,020
¿Vale?

257
00:25:38,020 --> 00:25:49,020
Como decía, asignación con el igual, constructor por copia ocurre lo mismo, la lista, el diccionario, el set, todos tienen constructor por copia.

258
00:25:49,020 --> 00:25:54,020
Si utilizas el constructor por copia, estáis copiando referencias a todo lo que esté contenido.

259
00:25:54,020 --> 00:26:00,020
Si una lista tiene otra lista, copieres la referencia y seguiréis teniendo el problema.

260
00:26:00,020 --> 00:26:05,020
Lo mismo con argumentos a funciones.

261
00:26:05,020 --> 00:26:10,020
Luego los clases atribuidos, los atributos de clases, se quedan en la clase y se quedan una sola vez.

262
00:26:10,020 --> 00:26:17,020
Por lo tanto, sin lo que no queréis son atributos de clases, que es atributos de instancia, quedarlos cuando tocas, cuando creáis cada instancia.

263
00:26:17,020 --> 00:26:21,020
Y lo mismo con los valores por efecto de las funciones.

264
00:26:21,020 --> 00:26:29,020
Si queréis que un valor por efecto se reinicie cada vez que llamáis, tenéis que hacerlo vosotros, país o no lo vasos.

265
00:26:29,020 --> 00:26:33,020
Aunque era lo que quizá inicialmente habéis interpretado.

266
00:26:33,020 --> 00:26:34,020
¿Vale?

267
00:26:34,020 --> 00:26:36,020
Pues eso es todo.

268
00:26:36,020 --> 00:26:59,020
Muchas gracias.

